package model;

import java.util.ArrayList;

public class ProjectManagementModelManager implements ProjectManagementModel
{
    // need to implement methods, they are all autogenerated and empty
    @Override
    public void addProject(String name, String description) {

    }

    @Override
    public Project[] getProjectsByName(String projectName) {
        return new Project[0];
    }

    @Override
    public Project[] getAllProjects() {
        return new Project[0];
    }

    @Override
    public void deleteProject(int projectID) {

    }

    @Override
    public Project[] getProjectsByScrumMaster(TeamMember teamMember) {
        return new Project[0];
    }

    @Override
    public Project[] getProjectsByProductOwner(TeamMember teamMember) {
        return new Project[0];
    }

    @Override
    public Project[] getProjectsByTeamMember(TeamMember teamMember) {
        return new Project[0];
    }

    @Override
    public int getProjectID(Project project) {
        return 0;
    }

    @Override
    public String getProjectName(Project project) {
        return null;
    }

    @Override
    public String getProjectDescription(Project project) {
        return null;
    }

    @Override
    public TeamMember[] getTeamMembers(Project project) {
        return new TeamMember[0];
    }

    @Override
    public TeamMember getScrumMaster(Project project) {
        return null;
    }

    @Override
    public TeamMember getProductOwner(Project project) {
        return null;
    }

    @Override
    public void addTeamMember(Project project, TeamMember teamMember) {

    }

    @Override
    public void removeTeamMember(Project project, TeamMember teamMember) {

    }

    @Override
    public void setName(Project project, String name) {

    }

    @Override
    public void setScrumMaster(Project project, TeamMember teamMember) {

    }

    @Override
    public void setProductOwner(Project project, TeamMember teamMember) {

    }

    @Override
    public float getProductivityOfMember(Project project, TeamMember teamMember) {
        return 0;
    }

    @Override
    public void setDescription(Project project, String description) {

    }

    @Override
    public Requirement[] getRequirementsByStatus(Project project, Status status) {
        return new Requirement[0];
    }

    @Override
    public void deleteRequirement(Project project, Requirement requirement) {

    }

    @Override
    public void reorderRequirements(int[] orderedRequirementsIDs) {

    }

    @Override
    public void addRequirement(Project project, String name, String nonFunctionalDescription, int deadline, TeamMember responsibleTeamMember) {

    }

    @Override
    public void addRequirement(Project project, String name, String[] FunctionalDescription, int deadline, TeamMember responsibleTeamMember) {

    }

    @Override
    public Requirement[] getAllRequirements(Project project) {
        return new Requirement[0];
    }

    @Override
    public Requirement[] getRequirementsBeforeDeadline(Project project, int days) {
        return new Requirement[0];
    }

    @Override
    public Requirement[] getRequirementsByResponsibleTeamMember(Project project, TeamMember responsible) {
        return new Requirement[0];
    }

    @Override
    public Requirement getRequirementByID(Project project, int requirementID) {
        return null;
    }

    @Override
    public Requirement[] getRequirementsByName(Project project, String name) {
        return new Requirement[0];
    }

    @Override
    public int getRequirementID(Requirement requirement) {
        return 0;
    }

    @Override
    public int getUsedTime(Requirement requirement) {
        return 0;
    }

    @Override
    public String getName(Requirement requirement) {
        return null;
    }

    @Override
    public boolean isFunctional(Requirement requirement) {
        return false;
    }

    @Override
    public String[] getDescription(Requirement requirement) {
        return new String[0];
    }

    @Override
    public TaskList getTasks(Requirement requirement) {
        return null;
    }

    @Override
    public int getEstimatedTime(Requirement requirement) {
        return 0;
    }

    @Override
    public TeamMember getResponsibleTeamMember(Requirement requirement) {
        return null;
    }

    @Override
    public Status getStatus(Requirement requirement) {
        return null;
    }

    @Override
    public int getDeadlineTime(Requirement requirement) {
        return 0;
    }

    @Override
    public void setName(Requirement requirement, String name) {

    }

    @Override
    public void setDescription(Requirement requirement, String description) {

    }

    @Override
    public void setDescription(Requirement requirement, String who, String what, String why) {

    }

    @Override
    public void setDeadlineTime(Requirement requirement, int newTime) {

    }

    @Override
    public void setResponsibleTeamMember(Requirement requirement, TeamMember teamMember) {

    }

    @Override
    public void setStatus(Requirement requirement, Status status) {

    }

    @Override
    public void addTask(Requirement requirement, String name, int id, int estimatedTime, String description, int deadlineTime, TeamMember responsibleTeamMember) {

    }

    @Override
    public void addTask(Requirement requirement, String name, int id, int estimatedTime, String description, int deadlineTime) {

    }

    @Override
    public void ChangeTaskTimeTrack(Requirement requirement, TrackTime newTrackTime) {

    }

    @Override
    public Task[] getAllTasks(Requirement requirement) {
        return new Task[0];
    }

    @Override
    public Task[] getTasksByName(Requirement requirement, String name) {
        return new Task[0];
    }

    @Override
    public void deleteTask(Requirement requirement, Task task) {

    }

    @Override
    public void changeTask(Requirement requirement, String name, int id, int estimatedTime, String description, int deadlineTime, TeamMember responsibleTeamMember) {

    }

    @Override
    public Task[] getTasksByStatus(Requirement requirement, Status status) {
        return new Task[0];
    }

    @Override
    public Task[] getTasksDaysBeforeDeadline(Requirement requirement, int days) {
        return new Task[0];
    }

    @Override
    public int getTaskID(Task task) {
        return 0;
    }

    @Override
    public String getName(Task task) {
        return null;
    }

    @Override
    public int getRequirementID(Task task) {
        return 0;
    }

    @Override
    public String getDescription(Task task) {
        return null;
    }

    @Override
    public int getEstimatedTime(Task task) {
        return 0;
    }

    @Override
    public int getDeadlineTime(Task task) {
        return 0;
    }

    @Override
    public int getTimeSpend(Task task) {
        return 0;
    }

    @Override
    public int getTimeSpendOfMember(Task task, TeamMember teamMember) {
        return 0;
    }

    @Override
    public TeamMember[] getTeamMember(Task task) {
        return new TeamMember[0];
    }

    @Override
    public TeamMember getResponsibleTeamMember(Task task) {
        return null;
    }

    @Override
    public Status getStatus(Task task) {
        return null;
    }

    @Override
    public void setName(Task task, String name) {

    }

    @Override
    public void setDescription(Task task, String description) {

    }

    @Override
    public void setEstimatedTime(Task task, int estimatedTime) {

    }

    @Override
    public void setDeadlineTIme(Task task, int time) {

    }

    @Override
    public void setResponsibleTeamMember(Task task, TeamMember teamMember) {

    }

    @Override
    public void setStatus(Task task, Status status) {

    }

    @Override
    public void setTimeWorked(Task task, TeamMember teamMember, int time) {

    }

    @Override
    public void addTeamMember(Task task, TeamMember teamMember) {

    }

    @Override
    public void addTeamMember(String name, String email) {

    }

    @Override
    public void deleteTeamMember(TeamMember teamMember) {

    }

    @Override
    public ArrayList<TrackTime> getTrackTime(Task task) {
        return null;
    }

    @Override
    public int getTotalTime(Task task) {
        return 0;
    }

    @Override
    public TeamMember[] getAllTeamMembers() {
        return new TeamMember[0];
    }

    @Override
    public String getEmail(TeamMember teamMember) {
        return null;
    }

    @Override
    public String getName(TeamMember teamMember) {
        return null;
    }

    @Override
    public void setEmail(TeamMember teamMember, String email) {

    }

    @Override
    public void setName(TeamMember teamMember, String name) {

    }

    @Override
    public Project[] getProjectsWorkedOn(TeamMember teamMember) {
        return new Project[0];
    }
}
